#!/bin/sh
#
# The GPLv2 License
#
#   Copyright (C) 2020  Peter Kenji Yamanaka
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Lowest priority, super nice (make this number smaller to increase priority, cannot go below 0)
__nice_value=19

# Arguments
for arg in $@; do

  # Get parameter after argument
  param=$(echo $@ | grep -oP "(?<=$arg )[^ ]+")
  param_mpv=$(echo $@ | egrep -o "(--(*\S+))")

  if [[ "$arg" =~ ^(-a|-arg)$ ]]; then
    for prm in "$param_mpv"; do :; done # dump mpv args into $prm
    arglist=$(echo "$prm")
    arglist_nb=$(echo $prm | sed 's:\n: :g')
  fi

  if [[ "$arg" =~ ^(-f|-file)$ ]]; then
    wallpaper_file=$param
    file="*"
    printf -- '- Manual mode enabled, overriding wallpaper..\n'
  fi

  if [[ "$arg" =~ ^(-p|-powersave)$ ]]; then
    req=wmctrl
    req2=socat
    if command -v $req > /dev/null && command -v $req2 > /dev/null; then
      autopause=on
      printf -- '- Auto-pause enabled.\n'
    else
      printf -- '- You must have both "%s" & "%s" installed to to use powersave mode.\n' "$req" "$req2"
    fi
  fi

  if [[ "$arg" =~ ^(-w|-wpg|-wpgtk)$ ]]; then
    req=wpg
    if command -v $req > /dev/null; then
      applytheme=1
    else
      printf -- '- You must have "%s" installed to generate & apply gtk theme.\n' "$req"
    fi
  fi

  if [[ "$arg" =~ ^(-h|-help)$ ]]; then
    printf -- '\n'
    printf -- 'Usage: animwall [ -a <params> -f <path> -p -w ]\n'
    printf -- '\n'
    printf -- ' -a , -arg <params>  - Pass args beginning with "--" to mpv, ex. '--scale=nearest'.\n'
    printf -- ' -f , -file <path>   - Load wallpaper from file instead of animwall.conf.\n'
    printf -- ' -p , -powersave     - Pause mpv when the desktop is inactive.\n'
    printf -- ' -w , -wpg, -wpgtk   - Generate & apply wpgtk theme from first frame.\n'
    printf -- ' -h , -help          - You are here.\n'
    printf -- '\n'
    exit
  fi
done

# Auto-pause to conserve system resources
# Only plays when 'Show Desktop' is active
watchdog() 
{
  paused=false
  sleep 1
  while true; do
    if [ $(wmctrl -m | tail -n 1 | grep -oE '[^ ]+$') = OFF ] && [ $paused = false ]; then
      echo '{"command": ["set_property", "pause", "yes"] }' | socat - /tmp/mpvsocket > /dev/null
      paused=true
    elif [ $(wmctrl -m | tail -n 1 | grep -oE '[^ ]+$') = ON ] && [ $paused = true ]; then
      echo '{"command": ["set_property", "pause", "no"] }' | socat - /tmp/mpvsocket > /dev/null
      paused=false
    fi
    sleep 1
  done
}

# wpgtk integration
animwpg()
{
  jpeg=$1.jpeg # store filename
  ffmpeg -hide_banner -i "$1" -vframes 1 "$jpeg" # extract first frame of video
  wpg -s $jpeg
  wpg -a $jpeg # set as wpgtk colorscheme
  wal -R # reload pywal
  cat /home/dog/.cache/wal/sequences
  xfconf-query -c xsettings -p /Net/ThemeName -s "FlatColor" & # apply gtk2
  gsettings set org.gnome.desktop.interface gtk-theme FlatColor & # apply gtk3
  if command -v pywalfox > /dev/null; then
    pywalfox update # reload pywalfox
  else
    printf -- '- pywalfox not installed, moving on...\n'
  fi
}

# Xwinwrap / MPV wrapper
# $1 wallpaper, $2 geometry, $3 screen
wrapped()
{
  # CLI
  printf -- '\n'
  printf -- '[ANIMWALL]: Launching... \n'
  printf -- '    Wallpaper-mpv: %s %s\n' "$1$file" "$arglist_nb"
  if [ -n "$jpeg" ]; then
  printf -- '    Wallpaper-wpg: %s\n' "$jpeg"; fi
  printf -- '    Geometry:      %s\n' "$2"
  printf -- '    Screen:        %s\n' "$3"
  
  # Options "-un" only used by xwinwrap-git
  # Will not work with shantz-xwinwrap-git
  # Uses deprecated -wid option instead of --wid because
  # xwinwrap will only interpret the WID as window id if it is
  # on its own, attaching it with equals breaks it.
  exec nice -n "${__nice_value}" xwinwrap \
    -g "$2" \
    -ni \
    -st \
    -sp \
    -nf \
    -b \
    -un \
    -- nice -n "${__nice_value}" mpv 1> /dev/null \
    -wid WID "$1" \
    --no-osc \
    --no-osd-bar \
    --no-input-default-bindings \
    --no-config \
    --no-audio \
    --player-operation-mode=cplayer \
    --panscan=1.0 \
    --keepaspect \
    --loop-file \
    --hwdec \
    --stop-screensaver=no \
    --input-ipc-server=/tmp/mpvsocket \
    $arglist
}

cancel()
{
  # Kill runaway pids
  for p in ${__pids}; do
    p="$(printf -- "%s" "${p}" \
      | sed 's/^[[:blank:]]*//' | sed 's/[[:blank:]]*$//')"
    if [ -n "${p}" ]; then
      kill "${p}" > /dev/null 2>&1
    fi
  done

  # Reset terminal in case it bugs out
  reset
}

main()
{
  # Check dependencies
  req_main="mpv xwinwrap nice"
  for val in $req_main; do
      if ! command -v $val > /dev/null; then
        printf -- '- Missing required dependency: "%s"\n' "$val"
        return 1
      fi
  done

  # Trap return signals
  trap cancel INT TERM

  # Check for config file
  animwall_configs=""
  config_dir="${XDG_CONFIG_DIR:-"${HOME}/.config"}/animwall"
  config_location="${config_dir}/animwall.conf"
  if [ -f "${config_location}" ] && [ -r "${config_location}" ]; then
    printf -- '- Reading %s..\n' "${config_location}"
    animwall_configs="$(cat -- "${config_location}")"
  else
    printf -- '- Could not find animwall.conf file at %s\n' "${config_location}"
    printf -- '- Creating example file...\n'

    # Make directory
    mkdir -p "${config_dir}" || {
      printf -- '- Failed to make configuration directory at: %s' "${config_dir}"
      return 1
    }

    # Make config file
    printf -- '%s\n' "$(cat << EOF
# This is the configuration file for animwall
#
# Entries are expected one per line in the format
# <FILE>:<WIDTHxHEIGHT+X+Y>:<SCREEN>
#
# Lines beginning with # are ignored
~/wallpapers/example_1.mp4:1920x1080+0+0:0
~/pictures/example2.jpg:2560x1440+1920+0:1
EOF
)" > "${config_location}"
    return 1
  fi

  # Prepare IFS
  # Split by lines only instead of whitespace
  old_ifs="${IFS}"
  IFS='
'

  # Parse config file
  if [ -z "${animwall_configs}" ]; then
    printf -- '- Animwall config was empty!\n'
    return 1
  fi  

  for config in ${animwall_configs}; do
    case "${config}" in
      \#*)
        printf -- '- Ignore line with comment: %s\n' "${config}" > /dev/null
        continue
        ;;
      *)
        ;;
    esac

    # Split wallpaper string
    split_config="$(printf -- "%s" "${config}" | tr ':' ' ')"
    geometry="$(printf -- "%s" "${split_config}" | awk '{ print $2 }')"
    screen="$(printf -- "%s" "${split_config}" | awk '{ print $3 }')"
    wallpaper_conf="$(printf -- "%s" "${split_config}" | awk '{ print $1 }')"
    
    # Use wallpaper from parameter if present
    if [ -n "$file" ]; then
      wallpaper=$wallpaper_file
    else
      wallpaper=$wallpaper_conf
    fi

    # In case the wallpaper path has ~ as HOME, we replace it
    # Replace all $HOME with literal HOME
    wallpaper="$(printf -- "%s" "${wallpaper}" | sed "s|^\~|\$HOME|g" | sed "s|^\$HOME|${HOME}|g" )"

    # Launch wpgtk
    if [ -n "$applytheme" ]; then
      animwpg "${wallpaper}"
    fi

    # Launch MPV
    if [ -n "${wallpaper}" ] && [ -n "${geometry}" ] && [ -n "${screen}" ]; then
      wrapped "${wallpaper}" "${geometry}" "${screen}" &
      __pids="$! ${__pids}"
    else
      if [ -z "${wallpaper}" ]; then printf -- '- Missing wallpaper path in config: %s\n' "${config}"; fi
      if [ -z "${geometry}" ]; then printf -- '- Missing geometry in config: %s\n' "${config}"; fi
      if [ -z "${screen}" ]; then printf -- '- Missing screen in config: %s\n' "${config}"; fi
    fi

    # Launch watchdog
    if [ -n "$autopause" ]; then
      watchdog &
      __pids="$! ${__pids}"
    fi

    unset split_config
    unset wallpaper
    unset geometry
    unset screen
    unset config
  done

  # Reset IFS
  IFS="${old_ifs}"

  # Wait for all wrapped processes to finish
  #
  # Do not quote so that this will split into a list, instead of a single,
  # space separated input
  # shellcheck disable=SC2086
  wait ${__pids}
  cancel
}

main "$@"
